osgPPU::Pipeline {
  osgPPU::Unit {
    UniqueID Unit_0
    name "Bypass"
    index 9
    blendEndTime 0
    blendStartTime 0
    blendStartValue 1
    blendEndValue 1
    blendEnabled 0
    isActive 1
    isOffline 0
    inputTextureIndexForViewportReference 0
    useMipmapShader 0
    useMipmaps 0
    outputInternalFormat GL_RGBA16F_ARB

    Input {
      PPU "Bypass"
    }

    Viewport {
      UniqueID Viewport_1
      x 0
      y 0
      width 512
      height 512
    }
  }

  osgPPU::UnitInOut {
    UniqueID UnitInOut_8
    name "BlurHorizontal"
    index 40
    blendEndTime 0
    blendStartTime 0
    blendStartValue 1
    blendEndValue 1
    blendEnabled 0
    isActive 1
    isOffline 0
    inputTextureIndexForViewportReference 0
    useMipmapShader 0
    useMipmaps 0
    outputInternalFormat GL_RGBA16F_ARB

    Input {
      PPU "Bypass"
    }

    Viewport {
      UniqueID Viewport_9
      x 0
      y 0
      width 512
      height 512
    }

    Shader {
      RefUniformPair {
        Uniform {
          name "g_ViewportHeight"
          type float 1 FloatArray 1
          {
            512 
          }
        }
        StateAttribute PROTECTED|OVERRIDE|ON
      }
      RefUniformPair {
        Uniform {
          name "g_ViewportWidth"
          type float 1 FloatArray 1
          {
            512 
          }
        }
        StateAttribute PROTECTED|OVERRIDE|ON
      }
      RefUniformPair {
        Uniform {
          name "radius"
          type float 1 FloatArray 1
          {
            7 
          }
        }
        StateAttribute PROTECTED|OVERRIDE|ON
      }
      RefUniformPair {
        Uniform {
          name "sigma"
          type float 1 FloatArray 1
          {
            7 
          }
        }
        StateAttribute PROTECTED|OVERRIDE|ON
      }
      RefUniformPair {
        Uniform {
          name "texUnit0"
          type sampler2D 1 IntArray 1
          {
            0 
          }
        }
        StateAttribute PROTECTED|OVERRIDE|ON
      }
      Program {
        num_shaders 2
        Shader {
          UniqueID Shader_10
          type VERTEX
          code {
            ""
            "/*"
            " * Reimplement fixed function pipeline of OpenGL"
            " * So bypass all the data."
            " * Precompute some constants which are needed for the convolution computation"
            " */"
            ""
            "//! Sigma value for the gaussian kernel"
            "uniform float sigma;"
            ""
            "const float PI = 3.1415926535897;"
            ""
            "// Varyings"
            "varying float sigma2;"
            "varying float c;"
            ""
            "/**"
            " * Reimplement fixed pipeline"
            " **/"
            "void main(void)"
            "{"
            "	// bypass the texture coordinate data"
            "	gl_TexCoord[0] = gl_MultiTexCoord0;"
            "	"
            "	// compute position of the pixel "
            "	gl_Position = ftransform();"
            "	"
            "	// bypass color data"
            "	gl_FrontColor = gl_Color;"
            "	"
            "	// precompute constants"
            "	sigma2 = 2.0 * sigma * sigma;"
            "	c = sqrt((1.0 / (sigma2 * PI)));"
            "}"
            ""
          }
        }
        Shader {
          type FRAGMENT
          code {
            "/*"
            " * Apply convolution of variable size onto the pixels."
            " * The convolution is done in 1D"
            " */"
            ""
            "// -------------------------------------------------------"
            "// Texture units used for texturing"
            "// -------------------------------------------------------"
            "uniform sampler2D texUnit0;"
            ""
            "//! Size of the gaussian kernel (size = radius * 2)"
            "uniform float radius;"
            ""
            "//! Sigam value for the gaussian kernel"
            "uniform float sigma;"
            ""
            "// Varyings"
            "varying float sigma2;"
            "varying float c;"
            ""
            "// width of the input texture "
            "uniform float g_ViewportWidth;"
            ""
            "// height of the input texture "
            "uniform float g_ViewportHeight;"
            ""
            "/**"
            " **/"
            "void main(void)"
            "{"
            "	// store here resulting color"
            "	vec4 color;"
            "	float totalWeigth = 0.0;"
            "	float inputTexTexelWidth = 1.0 / g_ViewportWidth;"
            "	"
            "	// convolve by applying nsamples-time the texture lookup"
            "	for (float i=-radius; i < radius; i += 1.0) "
            "	{"
            "		// compute weight for the pixel "
            "		float weight = c * exp((i*i) / (-sigma2));"
            "		totalWeigth += weight;"
            "		"
            "		// combine now the sum as all values multiplied by the weight"
            "		color += texture2D(texUnit0, gl_TexCoord[0].xy +  vec2(i * inputTexTexelWidth, 0) ) * weight;"
            "	}"
            "	color /= totalWeigth;"
            "	"
            "	gl_FragColor = color;"
            "}"
          }
        }
      }
    }
    isMipmappedIO 0
  }
  osgPPU::UnitInOut {
    UniqueID UnitInOut_11
    name "BlurVertical"
    index 41
    blendEndTime 0
    blendStartTime 0
    blendStartValue 1
    blendEndValue 1
    blendEnabled 0
    isActive 1
    isOffline 0
    inputTextureIndexForViewportReference 0
    useMipmapShader 0
    useMipmaps 0
    outputInternalFormat GL_RGBA16F_ARB

    Input {
      PPU "BlurHorizontal"
    }

    Viewport {
      UniqueID Viewport_12
      x 0
      y 0
      width 512
      height 512
    }

    Shader {
      RefUniformPair {
        Uniform {
          name "g_ViewportHeight"
          type float 1 FloatArray 1
          {
            512 
          }
        }
        StateAttribute PROTECTED|OVERRIDE|ON
      }
      RefUniformPair {
        Uniform {
          name "g_ViewportWidth"
          type float 1 FloatArray 1
          {
            512 
          }
        }
        StateAttribute PROTECTED|OVERRIDE|ON
      }
      RefUniformPair {
        Uniform {
          name "radius"
          type float 1 FloatArray 1
          {
            7 
          }
        }
        StateAttribute PROTECTED|OVERRIDE|ON
      }
      RefUniformPair {
        Uniform {
          name "sigma"
          type float 1 FloatArray 1
          {
            7 
          }
        }
        StateAttribute PROTECTED|OVERRIDE|ON
      }
      RefUniformPair {
        Uniform {
          name "texUnit0"
          type sampler2D 1 IntArray 1
          {
            0 
          }
        }
        StateAttribute PROTECTED|OVERRIDE|ON
      }
      Program {
        num_shaders 2
        Use Shader_10
        Shader {
          type FRAGMENT
          code {
            "/*"
            " * Apply convolution of variable size onto the pixels."
            " * The convolution is done in 1D"
            " */"
            ""
            "// -------------------------------------------------------"
            "// Texture units used for texturing"
            "// -------------------------------------------------------"
            "uniform sampler2D texUnit0;"
            ""
            "//! Size of the gaussian kernel (size = radius * 2)"
            "uniform float radius;"
            ""
            "//! Sigam value for the gaussian kernel"
            "uniform float sigma;"
            ""
            "// Varyings"
            "varying float sigma2;"
            "varying float c;"
            ""
            "// width of the input texture "
            "uniform float g_ViewportWidth;"
            ""
            "// height of the input texture "
            "uniform float g_ViewportHeight;"
            ""
            "/**"
            " **/"
            "void main(void)"
            "{"
            ""
            "	// store here resulting color"
            "	vec4 color;"
            "	float totalWeigth = 0.0;"
            "	float inputTexTexelWidth = 1.0 / g_ViewportHeight;"
            ""
            "	// convolve by applying nsamples-time the texture lookup"
            "	for (float i=-radius; i < radius; i += 1.0) "
            "	{"
            "		// compute weight for the pixel "
            "		float weight = c * exp((i*i) / (-sigma2));"
            "		totalWeigth += weight;"
            "		"
            "		// combine now the sum as all values multiplied by the weight"
            "		color += texture2D(texUnit0, gl_TexCoord[0].xy +  vec2(0, i * inputTexTexelWidth) ) * weight;"
            "	}"
            "	color /= totalWeigth;"
            "	"
            "	gl_FragColor = color;"
            "}"
          }
        }
      }
    }
    isMipmappedIO 0
  }

  osgPPU::UnitOut {
    UniqueID UnitOut_17
    name "PipelineResult"
    index 1000
    blendEndTime 0
    blendStartTime 0
    blendStartValue 1
    blendEndValue 1
    blendEnabled 0
    isActive 1
    isOffline 0
    inputTextureIndexForViewportReference 0
    useMipmapShader 0
    useMipmaps 0
    outputInternalFormat GL_RGBA16F_ARB

    Input {
      PPU "BlurVertical"
    }

    Viewport {
      UniqueID Viewport_18
      x 0
      y 0
      width 512
      height 512
    }
  }
}
